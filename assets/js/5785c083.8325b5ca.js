"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6652],{73516:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=i(74848),t=i(28453);const s={},d="\u041c\u0430\u0441\u0441\u0438\u0432\u044b",a={id:"algorithms/array",title:"\u041c\u0430\u0441\u0441\u0438\u0432\u044b",description:"\u041c\u0430\u0441\u0441\u0438\u0432\u044b - \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u044f\u0442\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438 - \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0436\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445!",source:"@site/docs/algorithms/2_array.md",sourceDirName:"algorithms",slug:"/algorithms/array",permalink:"/corgisaurus/docs/algorithms/array",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"algorithmsSidebar",previous:{title:"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445",permalink:"/corgisaurus/docs/algorithms/introduction"},next:{title:"\u0412 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435",permalink:"/corgisaurus/docs/algorithms/array_array"}},o={},l=[{value:"\u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b",id:"\u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043c\u0430\u0441\u0441\u0438\u0432\u044b",level:2},{value:"\u0417\u0430\u0434\u0430\u0447\u0430: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438",id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c-\u043c\u0430\u0441\u0441\u0438\u0432-\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438-\u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438",level:3},{value:"\u0417\u0430\u0434\u0430\u0447\u0430: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0430 \u0434\u0440\u043e\u0438\u0434\u043e\u0432 (\u043f\u043e\u0438\u0441\u043a \u0434\u0432\u0443\u0445 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u0432)",id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435-\u0441\u043e\u0441\u0442\u0430\u0432\u0430-\u0434\u0440\u043e\u0438\u0434\u043e\u0432-\u043f\u043e\u0438\u0441\u043a-\u0434\u0432\u0443\u0445-\u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u0432",level:3},{value:"\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430",id:"\u0444\u043e\u0440\u043c\u0430\u0442-\u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e-\u0444\u0430\u0439\u043b\u0430",level:4},{value:"\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b",id:"\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043c\u0430\u0441\u0441\u0438\u0432\u044b",level:2},{value:"\u0417\u0430\u0434\u0430\u0447\u0430: \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a",id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439-\u043f\u043e\u0438\u0441\u043a",level:3},{value:"\u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b. \u041e\u043d\u0438 \u0436\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b",id:"\u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435-\u043c\u0430\u0441\u0441\u0438\u0432\u044b-\u043e\u043d\u0438-\u0436\u0435-\u043c\u0430\u0442\u0440\u0438\u0446\u044b",level:2},{value:"\u0417\u0430\u0434\u0430\u0447\u0430: \u0421\u0435\u0434\u043b\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u0430",id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0435-\u0447\u0438\u0441\u043b\u0430",level:3}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components},{Details:i}=e;return i||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u043c\u0430\u0441\u0441\u0438\u0432\u044b",children:"\u041c\u0430\u0441\u0441\u0438\u0432\u044b"})}),"\n",(0,r.jsx)(e.p,{children:"\u041c\u0430\u0441\u0441\u0438\u0432\u044b - \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u044f\u0442\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438 - \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0436\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445!"}),"\n",(0,r.jsx)(e.h2,{id:"\u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043c\u0430\u0441\u0441\u0438\u0432\u044b",children:"\u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b"}),"\n",(0,r.jsx)(e.p,{children:"\u0417\u0430\u0434\u0430\u0447\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u044b - \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043f\u0430\u0441\u0442\u044c\u0441\u044f \u0432\u0430\u043c \u043f\u043e\u0434 \u0440\u0443\u043a\u0443. \u042d\u0442\u043e \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u043d\u043e \u0442\u0435\u043c, \u0447\u0442\u043e \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c \u043e\u0431\u044b\u0447\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c: \u043e\u043d \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c, \u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0437\u0430\u0440\u0430\u043d\u0435\u0435, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043d\u0438\u043c \u043d\u0430\u0441 \u0436\u0434\u0443\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0435."}),"\n",(0,r.jsx)(e.h3,{id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c-\u043c\u0430\u0441\u0441\u0438\u0432-\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438-\u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438",children:"\u0417\u0430\u0434\u0430\u0447\u0430: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c!"})," \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u0442\u0443\u0442 \u0434\u0430\u0436\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f.  \u041d\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043e\u043d\u0430 \u0437\u0432\u0443\u0447\u0438\u0442 \u0442\u0430\u043a"]}),"\n",(0,r.jsx)(e.p,{children:'\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u043c\u0435\u0442\u043e\u0434\u043e\u043c "\u043f\u0443\u0437\u044b\u0440\u044c\u043a\u0430" \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 [-100; 100). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\u044b.'}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include "bubble.h"\n\n//\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u0430\nvoid SortBubble (int arr[], int size) {\n    for (int i = 0; i < size; ++i){\n        for (int j = 0; j < size; ++j){\n            if (arr[j] > arr [j+1]){\n                int tmp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n            }\n        }\n    }\n}\n\n//\u0432\u044b\u0432\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430\nvoid PrintBubble(int arr[], int size) {\n    for (int i = 0; i < size; ++i) {\n        std::cout << arr[i] << " ";\n    }\n    std::cout << std::endl;\n}\n\nvoid ExecuteBubbleSort (){\n    //\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    srand(static_cast<unsigned int>(time(0)));\n\n    //\u0432\u0432\u043e\u0434 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    std::cout << "Enter the size of the array: " << std::endl;\n    int size;\n    std::cin >> size;\n\n    //\u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u043c\u043d\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c, \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432\n    //\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0430\u044f\u043c\u0442\u0438\n    std::unique_ptr<int[]> arr(new int[size]);\n\n    //\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 \u043e\u0442 -100 \u0434\u043e 99\n    for (int i = 0; i < size; ++i) {\n        arr[i] = rand() % 200 - 100;\n    }\n\n    //\u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0435\u0447\u0430\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n    std::cout << "Original array: " << std::endl;\n    PrintBubble(arr.get(), size);\n\n    //\u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n    SortBubble(arr.get(), size);\n\n    //\u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0435\u0447\u0430\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n    std::cout << "Sorted array: " << std::endl;\n    PrintBubble(arr.get(), size);\n\n    // \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438.\n    arr.reset(); // \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u044c\n\n    // \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u0442\u0430\u043b nullptr \u043f\u043e\u0441\u043b\u0435 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438\n    assert(arr.get() == nullptr);\n    std::cout << "Memory successfully freed." << std::endl;\n\n}\n\n'})})]}),"\n",(0,r.jsx)(e.p,{children:"\u0423 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0432\u043e\u043f\u0440\u043e\u0441: \u0430 \u0433\u0434\u0435 main? \u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e. \u0410 \u043e\u0442\u0432\u0435\u0442 \u0431\u0443\u0434\u0435\u0442 \u0447\u0443\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435. \u0422.\u043a. \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0448\u0430\u043b\u0430\u0441\u044c \u043c\u043d\u043e\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u0435\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u041c\u0413\u0423, \u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u0440\u0430\u0437\u0443 \u0438\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u0417\u0430\u0434\u0430\u0447\u0430 2"})}),"\n",(0,r.jsx)(e.p,{children:"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e \u043d\u0435\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 [0; 50). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\u044b."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include "selection.h"\n\n//\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\nvoid SelectionSort (double arr[], int size) {\n    for (int i = 0; i < size; ++i){\n        int maxIndex;\n        for (int j = 0; j <size; ++j){\n            if (arr[j] > maxIndex){\n                maxIndex = j;\n            }\n        }\n        double tmp = arr[i];\n        arr[i] = arr[maxIndex];\n        arr[maxIndex] = tmp;\n    }\n}\n\n//\u0432\u044b\u0432\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430\nvoid PrintSelection(double arr[], int size) {\n    for (int i = 0; i < size; ++i) {\n        std::cout << arr[i] << " ";\n    }\n    std::cout << std::endl;\n}\n\nvoid ExecuteSelectionSort (){\n    //\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    srand(static_cast<unsigned int>(time(0)));\n\n    //\u0432\u0432\u043e\u0434 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    std::cout << "Enter the size of the array: " << std::endl;\n    int size;\n    std::cin >> size;\n\n    //\u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u043c\u043d\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c, \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432\n    //\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0430\u044f\u043c\u0442\u0438\n    std::unique_ptr<double[]> arr(new double [size]);\n\n    //\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 [0; 50)\n    for (int i = 0; i < size; ++i) {\n        arr[i] = static_cast<double>(rand()) / RAND_MAX * 50;\n    }\n\n    //\u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0435\u0447\u0430\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n    std::cout << "Original array: " << std::endl;\n    PrintSelection(arr.get(), size);\n\n    //\u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n    SelectionSort(arr.get(), size);\n\n    //\u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0435\u0447\u0430\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n    std::cout << "Sorted array: " << std::endl;\n    PrintSelection(arr.get(), size);\n\n    // \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438.\n    arr.reset(); // \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u044c\n\n    // \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u0442\u0430\u043b nullptr \u043f\u043e\u0441\u043b\u0435 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438\n    assert(arr.get() == nullptr);\n    std::cout << "Memory successfully freed." << std::endl;\n\n}\n'})})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u0417\u0430\u0434\u0430\u0447\u0430 3"})}),"\n",(0,r.jsx)(e.p,{children:"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\u044b."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include "insertion.h"\n\nvoid insertionSort(int arr[], int size){\n    for (int i = 0; i < size; ++i){\n        int key = arr[i];\n        int j = i - 1;\n\n        while (j >= 0 && arr[j] > key){\n            arr[j + 1] = arr[j];\n            --j;\n        }\n        arr[j+1] = key;\n    }\n}\n\nvoid PrintInsertion(int arr[], int size) {\n    for (int i = 0; i < size; ++i) {\n        std::cout << arr[i] << " ";\n    }\n    std::cout << std::endl;\n}\n\n// \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c\nvoid ExecuteInsertionSort() {\n    int size;\n    std::cout << "Enter the size of the array: ";\n    std::cin >> size;\n\n    std::unique_ptr<int[]> arr(new int[size]);\n\n    std::cout << "Fill the array with distinct numbers: ";\n    std::cout << " ";\n    for (int i = 0; i < size; ++i) {\n        int input;\n        bool isDuplicate;\n\n        do {\n            isDuplicate = false;\n            std::cin >> input;\n\n            for (int j = 0; j < i; ++j){\n                if (arr[j] == input){\n                    std::cout << "Number already entered. Please try another: ";\n                    isDuplicate = true;\n                    break;\n                }\n            }\n        } while (isDuplicate);\n        arr[i] = input;\n    }\n\n    std::cout << "Original array: ";\n    PrintInsertion(arr.get(), size);\n\n    insertionSort(arr.get(), size);\n\n    std::cout << "Sorted array: ";\n    PrintInsertion(arr.get(), size);\n\n    arr.reset();\n\n    assert(arr.get() == nullptr);\n    std::cout << "Memory successfully freed." << std::endl;\n}\n'})})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u0417\u0430\u0434\u0430\u0447\u0430 4"})}),"\n",(0,r.jsx)(e.p,{children:"\u041c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 2m + 1, \u0433\u0434\u0435 m \u2013 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u0443. \u041c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u044f\u0434\u0430, \u0434\u0435\u043b\u044f\u0449\u0438\u0439 \u0435\u0433\u043e \u043d\u0430 \u0434\u0432\u0435 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438: \u0432 \u043e\u0434\u043d\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u2013 \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <algorithm>\n#include <memory>\n\n#pragma once\n\nvoid FindMedian () {\n    int m;\n    std::cout << "Enter the value of m (natural number): ";\n    std::cin >> m;\n\n    if (m <= 0){\n        std::cout << "The value of m must be a natural number (positive integer)." << std::endl;\n        return;\n    }\n\n    int size = 2*m + 1;\n\n    std::unique_ptr<int[]> arr(new int[size]);\n\n    //\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 [0; 50)\n    for (int i = 0; i < size; ++i) {\n        arr[i] = static_cast<double>(rand()) / RAND_MAX * 50;\n    }\n\n    std::cout << "Generated array: ";\n\n    for (int i = 0; i < size; ++i ){\n        std::cout << arr[i] << \' \';\n    }\n\n    std::cout << std::endl;\n\n    // \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    std::sort(arr.get(), arr.get()+size);\n\n    //\u0412 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0432\u0440\u043e\u0434\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0434\u043e, \u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u043b \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u044e \u0435\u0433\u043e\n    std::cout << "Sorted array: ";\n\n    for (int i = 0; i < size; ++i ){\n        std::cout << arr[i] << \' \';\n    }\n\n    // \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b\n    int median = arr[size/2];\n    std::cout << "Median: " << median << std::endl;\n\n    arr.reset();\n\n    assert(arr.get() == nullptr);\n    std::cout << "Memory successfully freed." << std::endl;\n\n}\n'})})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\u0417\u0430\u0434\u0430\u0447\u0430 5"})}),"\n",(0,r.jsx)(e.p,{children:"\u041c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c m, \u0433\u0434\u0435 m \u2013 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043c\u043e\u0434\u0443. \u041c\u043e\u0434\u043e\u0439 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u044f\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <unordered_map>\n#include <algorithm>\n#include <vector>\n#include <memory>\n\n#pragma once\n\nvoid FindMode () {\n    int m;\n    std::cout << "Enter the value of m (size) (natural number): ";\n    std::cin >> m;\n\n    if (m <= 0){\n        std::cout << "The value of m must be a natural number (positive integer)." << std::endl;\n        return;\n    }\n\n    std::unique_ptr<int[]> arr(new int[m]);\n\n    //\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 [0; 50)\n    for (int i = 0; i < m; ++i) {\n        arr[i] = static_cast<double>(rand()) / RAND_MAX * 50;\n    }\n\n    std::cout << "Generated array: ";\n\n    for (int i = 0; i < m; ++i ){\n        std::cout << arr[i] << \' \';\n    }\n\n    std::cout << std::endl;\n\n    // \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    // \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c unordered_map \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b\n    std::unordered_map<int, int> frequencyMap;\n    for (int i = 0; i < m; ++i) {\n        frequencyMap[arr[i]]++;\n    }\n\n    // \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u043e\u0442\u044b\n    int maxFrequency = 0;\n    for (const auto& pair : frequencyMap) {\n        if (pair.second > maxFrequency) {\n            maxFrequency = pair.second;\n        }\n    }\n\n    // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u0432\u0441\u0435 \u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\n    if (maxFrequency == 1) {\n        std::cout << "All numbers in the array occur exactly once." << std::endl;\n    } else {\n        std::cout << "Numbers with the maximum frequency (" << maxFrequency << "):" << std::endl;\n        for (const auto& pair : frequencyMap) {\n            if (pair.second == maxFrequency) {\n                std::cout << "Number: " << pair.first << std::endl;\n            }\n        }\n    }\n\n    arr.reset();\n\n    assert(arr.get() == nullptr);\n    std::cout << "Memory successfully freed." << std::endl;\n}\n'})})]}),"\n",(0,r.jsx)(e.p,{children:"\u0412\u0441\u0435 \u044d\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e main \u0444\u0430\u0439\u043b\u0430:"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0424\u0443\u043d\u043a\u0446\u0438\u044f main"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include "bubble.h"\n#include "selection.h"\n#include "insertion.h"\n#include "median.h"\n#include "mode.h"\n\n//\u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 main \u0431\u0435\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u0439\nenum class MenuOption {\n    BubbleSort = 1,\n    SelectionSort,\n    InsertionSort,\n    FindMedian,\n    FindMode,\n    Exit = 0\n};\n\nint main() {\n    int number;\n\n    while (true) {\n        std::cout << "Choose the task option:" << std::endl;\n        std::cout << "1. Bubble Sort" << std::endl;\n        std::cout << "2. Selection Sort" << std::endl;\n        std::cout << "3. Insertion Sort" << std::endl;\n        std::cout << "4. Find median" << std::endl;\n        std::cout << "5. Find mode" << std::endl;\n        std::cout << "0. Exit" << std::endl;\n\n        std::cin >> number;\n\n        MenuOption option = static_cast<MenuOption>(number);\n\n        switch (option) {\n            case MenuOption::BubbleSort:\n                ExecuteBubbleSort();\n                break;\n            case MenuOption::SelectionSort:\n                ExecuteSelectionSort();\n                break;\n            case MenuOption::InsertionSort:\n                ExecuteInsertionSort();\n                break;\n            case MenuOption::FindMedian:\n                FindMedian();\n                break;\n            case MenuOption::FindMode:\n                FindMode();\n                break;\n            case MenuOption::Exit:\n                std::cout << "Exiting program." << std::endl;\n                return 0;\n            default:\n                std::cout << "Unknown option." << std::endl;\n        }\n    }\n\n    return 0;\n}\n\n'})})]}),"\n",(0,r.jsx)(e.h3,{id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435-\u0441\u043e\u0441\u0442\u0430\u0432\u0430-\u0434\u0440\u043e\u0438\u0434\u043e\u0432-\u043f\u043e\u0438\u0441\u043a-\u0434\u0432\u0443\u0445-\u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u0432",children:"\u0417\u0430\u0434\u0430\u0447\u0430: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0430 \u0434\u0440\u043e\u0438\u0434\u043e\u0432 (\u043f\u043e\u0438\u0441\u043a \u0434\u0432\u0443\u0445 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u0432)"}),"\n",(0,r.jsx)(e.p,{children:"\u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0432\u0438\u0437\u0438\u0442\u043e\u043c \u0418\u043c\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u041f\u0430\u043b\u043f\u0430\u0442\u0438\u043d\u0430 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u0434\u0440\u043e\u0438\u0434\u043e\u0432 \u0432 \u0430\u043d\u0433\u0430\u0440\u0435 32. \u0418\u0437-\u0437\u0430 \u043a\u0440\u0438\u0437\u0438\u0441\u0430 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0437\u0430\u043a\u0443\u043f\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u0434\u0440\u043e\u0438\u0434\u043e\u0432, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0430\u0440\u044b\u0445. \u041a\u0430\u043a \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u041f\u0430\u043b\u043f\u0430\u0442\u0438\u043d \u043d\u0435 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442 \u0434\u0440\u043e\u0438\u0434\u043e\u0432 \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u0441\u0435\u0440\u0438\u0439\u043d\u044b\u043c\u0438 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0434\u0432\u0443\u0445 \u0434\u0440\u043e\u0438\u0434\u043e\u0432 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c\u0438 \u0441\u0435\u0440\u0438\u0439\u043d\u044b\u043c\u0438 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438."}),"\n",(0,r.jsx)(e.h4,{id:"\u0444\u043e\u0440\u043c\u0430\u0442-\u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e-\u0444\u0430\u0439\u043b\u0430",children:"\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e ",(0,r.jsx)(e.code,{children:"N"})," \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u043e\u0438\u0434\u043e\u0432 (2 \u2264 N \u2264 1000)."]}),"\n",(0,r.jsxs)(e.li,{children:["\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 ",(0,r.jsx)(e.code,{children:"N"})," \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0445 ",(0,r.jsx)(e.code,{children:"2 \xd7 10^9"})," \u2014 \u0441\u0435\u0440\u0438\u0439\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u0440\u043e\u0438\u0434\u043e\u0432."]}),"\n"]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <climits>  // \u0414\u043b\u044f INT_MAX\n\nint main() {\n    int n;\n    // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    std::cin >> n;\n\n    // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n    int arr[n];\n    // \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0437\u0434\u0435\u0441\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 n)\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    for (int i = 0; i < size; ++i){\n        int value;\n        std::cin >> value;\n        arr[i] = value;  // \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n    }\n\n    // \u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 2, \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0434\u0432\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    if (n <= 2) {\n        std::cout << "Destroy all droids!" << std::endl;\n        return -1;  // \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438\n    }\n\n    // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    int min1 = INT_MAX;  // \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    int min2 = INT_MAX;  // \u0412\u0442\u043e\u0440\u043e\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n    // \u041f\u043e\u0438\u0441\u043a \u0434\u0432\u0443\u0445 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n    for (int i = 0; i < size; ++i){\n        if (arr[i] < min1) {\n            // \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e, \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c min1 \u0438 min2\n            min2 = min1;\n            min1 = arr[i];\n        } else if (arr[i] < min2 && arr[i] != min1) {\n            // \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 min2, \u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 min1 \u0438 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e min1\n            min2 = arr[i];\n        }\n    }\n\n    // \u0415\u0441\u043b\u0438 min2 \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u0440\u0430\u0432\u043d\u043e\u0439 INT_MAX, \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u043d\u044b\n    if (min2 == INT_MAX) {\n        std::cout << "All droids have equal numbers" << std::endl;\n    } else {\n        // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u0432\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        std::cout << min1 << \' \' << min2 << std::endl;\n    }\n\n    return 0;  // \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n}\n\n\n'})})]}),"\n",(0,r.jsx)(e.p,{children:"\u0412\u0441\u0435 \u044d\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0443\u0436\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0435."}),"\n",(0,r.jsx)(e.h2,{id:"\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043c\u0430\u0441\u0441\u0438\u0432\u044b",children:"\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b"}),"\n",(0,r.jsx)(e.p,{children:'\u0417\u0430\u0434\u0430\u0447\u0438 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c\u0438 - \u043e\u0431\u044b\u0447\u043d\u043e \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435. \u041e\u043d\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043b\u043e\u0432: "\u0417\u0430\u0434\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 N". \u0422\u0430\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0430\u0449\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u043f\u043e\u0438\u0441\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432 \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u0445 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f.'}),"\n",(0,r.jsx)(e.h3,{id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439-\u043f\u043e\u0438\u0441\u043a",children:"\u0417\u0430\u0434\u0430\u0447\u0430: \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a"}),"\n",(0,r.jsx)(e.p,{children:'\u041d\u0435\u043a\u0442\u043e \u0437\u0430\u0433\u0430\u0434\u0430\u043b \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e N. \u0417\u0430 \u043a\u0430\u043a\u043e\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 (\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 "\u0434\u0430" \u0438\u043b\u0438 "\u043d\u0435\u0442") \u043c\u043e\u0436\u043d\u043e \u0443\u0433\u0430\u0434\u0430\u0442\u044c \u0437\u0430\u0434\u0443\u043c\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e?'}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.em,{children:"\u0414\u0430, \u044d\u0442\u043e \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u0440\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u044b, \u043d\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u043e\u0442\u0441\u044e\u0434\u0430."})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <iostream>\n#include <cmath>\n\nint main() {\n    int n;\n    std::cin >> n;\n    //\u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\n    int qustions = std::ceil(std::log2(n));\n\n    std::cout << qustions << std::endl;\n\n    return 0;\n}\n\n"})})]}),"\n",(0,r.jsx)(e.h2,{id:"\u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435-\u043c\u0430\u0441\u0441\u0438\u0432\u044b-\u043e\u043d\u0438-\u0436\u0435-\u043c\u0430\u0442\u0440\u0438\u0446\u044b",children:"\u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b. \u041e\u043d\u0438 \u0436\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b"}),"\n",(0,r.jsx)(e.h3,{id:"\u0437\u0430\u0434\u0430\u0447\u0430-\u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0435-\u0447\u0438\u0441\u043b\u0430",children:"\u0417\u0430\u0434\u0430\u0447\u0430: \u0421\u0435\u0434\u043b\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u0430"}),"\n",(0,r.jsx)(e.p,{children:"\u0417\u0430\u0434\u0430\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 K, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f n \u0441\u0442\u0440\u043e\u043a \u0438 m \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432. \u0421\u0435\u0434\u043b\u043e\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u044d\u0442\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043d\u0430\u0437\u043e\u0432\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u0441\u0432\u043e\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u0441\u0432\u043e\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(e.strong,{children:"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"})}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <iostream>\n#include <vector>\n#include <limits.h>  // \u0414\u043b\u044f INT_MAX, \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n\nint main() {\n    int n, m;\n    // \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a (n) \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (m) \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n    std::cin >> n >> m;\n\n    // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n x m \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0435\u0451 \u043d\u0443\u043b\u044f\u043c\u0438\n    std::vector<std::vector<int>> matrix(n, std::vector<int>(m));\n\n    // \u0412\u0432\u043e\u0434 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            std::cin >> matrix[i][j];  // \u0427\u0438\u0442\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n        }\n    }\n\n    int saddlePointsCount = 0;  // \u0421\u0447\u0435\u0442\u0447\u0438\u043a \u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a\n\n    // \u041f\u043e\u0438\u0441\u043a \u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a\n    for (int i = 0; i < n; ++i) {\n        // \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 i\n        int rowMin = matrix[i][0];\n        for (int j = 1; j < m; ++j) {\n            if (matrix[i][j] < rowMin) {\n                rowMin = matrix[i][j];  // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n            }\n        }\n\n        // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u0441\u0435\u0434\u043b\u043e\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438\n        for (int j = 0; j < m; ++j) {\n            if (matrix[i][j] == rowMin) {  // \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u0430\u0432\u0435\u043d \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0441\u0442\u0440\u043e\u043a\u0438\n                bool isSaddlePoint = true;\n\n                // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u044d\u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u0441\u0432\u043e\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n                for (int k = 0; k < n; ++k) {\n                    if (matrix[k][j] > matrix[i][j]) {\n                        isSaddlePoint = false;  // \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n                        break;  // \u0412\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n                    }\n                }\n\n                // \u0415\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u0435\u0442 \u043e\u0431\u043e\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a\n                if (isSaddlePoint) {\n                    saddlePointsCount++;\n                }\n            }\n        }\n    }\n\n    // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0434\u043b\u043e\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a\n    std::cout << saddlePointsCount << std::endl;\n\n    return 0;  // \u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n}\n\n"})})]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>a});var r=i(96540);const t={},s=r.createContext(t);function d(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);